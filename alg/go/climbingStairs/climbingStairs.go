// Source : https://leetcode.cn/problems/climbing-stairs
// Date   : 2023-03-13

/**********************************************************************************
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：

输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶
示例 2：

输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶


提示：

	1 <= n <= 45
**********************************************************************************/

package climbingStairs

/*
	这里我们首先判断特殊情况，当n为1时，只有一种方法爬到楼顶，返回1；当n为2时，有两种方法爬到楼顶，返回2。
	然后定义一个长度为n+1的数组dp来存储到达每一级楼梯的方案数。我们初始化dp[1]为1，dp[2]为2。
	接下来，用循环更新dp数组，对于每一级楼梯，都可以从前一级楼梯或前两级楼梯跳上来，因此到达当前楼梯的方案数等于到达前一级楼梯的方案数加上到达前两级楼梯的方案数。
	最终返回dp[n]即可，表示到达第n级楼梯的方案数。

	本题亦可采用递归求解，但由于递归算法没有记忆化，会出现大量重复计算，导致超时。
*/

func climbStairs(n int) int {
	if n == 1 {
		return 1
	}
	if n == 2 {
		return 2
	}
	dp := make([]int, n+1)
	dp[1] = 1
	dp[2] = 2
	for i := 3; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	return dp[n]
}
