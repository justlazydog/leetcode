// Source : https://leetcode.cn/problems/house-robber
// Date   : 2023-03-22

/**********************************************************************************
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：

输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：

输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。


提示：

	1 <= nums.length <= 100
	0 <= nums[i] <= 400
**********************************************************************************/

package houseRobber

//我们定义一个长度为n的数组dp，其中dp[i]表示在前i个房屋中可以抢劫的最大金额。
//我们可以用动态规划的思想来解决这个问题。
//对于第i个房屋，我们有两个选择：抢或不抢。
//如果抢第i个房屋，那么前i-1个房屋就不能抢了，最大金额为dp[i-2]+nums[i]；
//如果不抢第i个房屋，那么最大金额就是前i-1个房屋中可以抢劫的最大金额dp[i-1]。
//因此，我们可以得到状态转移方程：dp[i] = max(dp[i-1], dp[i-2]+nums[i])。
//最后，我们返回dp[n-1]，即在前n个房屋中可以抢劫的最大金额。max函数用于比较两个数的大小，返回较大的那个数。

func rob(nums []int) int {
	n := len(nums)
	if n == 1 {
		return nums[0]
	}

	dp := make([]int, n)
	dp[0] = nums[0]
	dp[1] = max(nums[0], nums[1])
	for i := 2; i < n; i++ {
		dp[i] = max(dp[i-1], dp[i-2]+nums[i])
	}
	return dp[n-1]
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
