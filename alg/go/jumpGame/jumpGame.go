// Source : https://leetcode.cn/problems/jump-game
// Date   : 2023-03-13

/**********************************************************************************
给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个下标。

示例 1：

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。

示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。


提示：

	1 <= nums.length <= 3 * 104
	0 <= nums[i] <= 105
**********************************************************************************/

package canJump

/*
	我们使用了一个maxPos变量来记录在当前位置能够到达的最远位置。
	在遍历整个数组的过程中，我们不断更新maxPos的值，如果在某个位置i上，i已经超过了maxPos，说明无法到达该位置，返回false即可。
	最终，如果遍历到了数组末尾，说明可以从第一个元素跳到最后一个元素，返回true即可。
*/

func canJump(nums []int) bool {
	maxPos := 0
	for i := 0; i < len(nums); i++ {
		if i > maxPos {
			return false
		}
		maxPos = max(maxPos, i+nums[i])
	}
	return true
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}
