// Source : https://leetcode.cn/problems/minimum-cost-for-tickets
// Date   : 2023-03-28

/**********************************************************************************
在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。
火车票有 三种不同的销售方式 ：

	一张 为期一天 的通行证售价为 costs[0] 美元；
	一张 为期七天 的通行证售价为 costs[1] 美元；
	一张 为期三十天 的通行证售价为 costs[2] 美元。

通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张 为期 7 天 的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
返回 你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费 。

示例 1：

输入：days = [1,4,6,7,8,20], costs = [2,7,15]
输出：11
解释：
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
你总共花了 $11，并完成了你计划的每一天旅行。

示例 2：

输入：days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
输出：17
解释：
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。
你总共花了 $17，并完成了你计划的每一天旅行。


提示：

	1 <= days.length <= 365
	1 <= days[i] <= 365
	days 按顺序严格递增
	costs.length == 3
	1 <= costs[i] <= 1000
**********************************************************************************/

package minimumCostForTickets

func mincostTickets(days []int, costs []int) int {
	dp := make([]int, days[len(days)-1]+1) // 初始化长度为最后一天+1的 dp 数组
	for i := 1; i < len(dp); i++ {
		if search(days, i) { // 如果是旅游日
			dp[i] = min(dp[i-1]+costs[0], dp[max(0, i-7)]+costs[1]) // 计算当前最小花费
			dp[i] = min(dp[i], dp[max(0, i-30)]+costs[2])
		} else { // 如果不是旅游日
			dp[i] = dp[i-1] // 今天不旅游，花费等于昨天花费
		}
	}
	return dp[len(dp)-1] // 返回最后一天的最小花费
}

// 辅助函数，判断某一天是否为旅游日
func search(days []int, target int) bool {
	for i := 0; i < len(days); i++ {
		if days[i] == target {
			return true
		}
	}
	return false
}

// 辅助函数，返回两个数中较小的一个
func min(x, y int) int {
	if x < y {
		return x
	}
	return y
}

// 辅助函数，返回两个数中较大的一个
func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}
